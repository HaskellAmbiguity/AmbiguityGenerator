module Ambiguity where

import System.Random


-- | Draw a value from the cauchy distribution.
cauchyDraw :: Floating a => a -> a -> a -> a
cauchyDraw offset scale y = scale * tan (pi * (y - 1/2)) + offset


-- | Want a monad for drawing cauchy numbers.
{-
  Want to be able to...
  
  x <- draw
  y <- draw
  z <- draw
-}


-- |
data AmbiguousGen a s = 
     AmbiguousGen { ambiguousGenOffset :: a
                  , ambiguousGenScale :: a
                  , ambiguousGenPhi :: a
                  , ambiguousGenPsi :: a
                  , ambiguousGenSource :: s
                  }


nextAmbiguous :: (Floating a, RandomGen s) => AmbiguousGen a s -> (a, AmbiguousGen a s)
nextAmbiguous (AmbiguousGen offset scale phi psi s)
  = (cauchyDraw scale offset y, AmbiguousGen offset scale)
    where (y, s') = next s
